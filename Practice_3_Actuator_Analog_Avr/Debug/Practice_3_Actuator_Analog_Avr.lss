
Practice_3_Actuator_Analog_Avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000582  000005f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000582  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000774  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c17  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001983  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000256a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  78:	0c 94 bf 02 	jmp	0x57e	; 0x57e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <analogWrite>:

#include <avr/io.h>
#include <util/delay.h>


void analogWrite(uint8_t pin, uint8_t val){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <analogWrite+0x6>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	89 83       	std	Y+1, r24	; 0x01
  8c:	6a 83       	std	Y+2, r22	; 0x02

	DDRB |= (DDRB & 0x00) | (pin & 0xFF);
  8e:	84 e2       	ldi	r24, 0x24	; 36
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	fc 01       	movw	r30, r24
  94:	80 81       	ld	r24, Z
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	48 2f       	mov	r20, r24
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	84 e2       	ldi	r24, 0x24	; 36
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	24 e2       	ldi	r18, 0x24	; 36
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	20 81       	ld	r18, Z
  a8:	32 2f       	mov	r19, r18
  aa:	24 2f       	mov	r18, r20
  ac:	23 2b       	or	r18, r19
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18

	if(pin == 2) OCR1A = val;
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	41 f4       	brne	.+16     	; 0xc8 <analogWrite+0x48>
  b8:	88 e8       	ldi	r24, 0x88	; 136
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2a 81       	ldd	r18, Y+2	; 0x02
  be:	22 2f       	mov	r18, r18
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	31 83       	std	Z+1, r19	; 0x01
  c6:	20 83       	st	Z, r18
	if(pin == 4) OCR1B = val;
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	84 30       	cpi	r24, 0x04	; 4
  cc:	41 f4       	brne	.+16     	; 0xde <analogWrite+0x5e>
  ce:	8a e8       	ldi	r24, 0x8A	; 138
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	2a 81       	ldd	r18, Y+2	; 0x02
  d4:	22 2f       	mov	r18, r18
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	31 83       	std	Z+1, r19	; 0x01
  dc:	20 83       	st	Z, r18
}
  de:	00 00       	nop
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <pwm_init>:

void pwm_init(){
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A |= _BV(COM1A1) | _BV(COM1B1) | _BV(WGM12) | _BV(WGM10);
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	20 e8       	ldi	r18, 0x80	; 128
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	f9 01       	movw	r30, r18
  fc:	20 81       	ld	r18, Z
  fe:	29 6a       	ori	r18, 0xA9	; 169
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
	TCCR1B |= _BV(WGM12) | _BV(CS10);
 104:	81 e8       	ldi	r24, 0x81	; 129
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	21 e8       	ldi	r18, 0x81	; 129
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	20 81       	ld	r18, Z
 110:	29 60       	ori	r18, 0x09	; 9
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
}
 116:	00 00       	nop
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <main>:

int main() {
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	6d 97       	sbiw	r28, 0x1d	; 29
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Konfigurasi pin, protokol, variabel
	 */

	pwm_init();
 132:	0e 94 75 00 	call	0xea	; 0xea <pwm_init>

	uint8_t brightness = 0x00;
 136:	19 82       	std	Y+1, r1	; 0x01

	while(1){
		/*
		 * Perulangan kode
		 */
		for(brightness = 0x00; brightness < 0xff; ++brightness){
 138:	19 82       	std	Y+1, r1	; 0x01
 13a:	7d c0       	rjmp	.+250    	; 0x236 <main+0x118>
			analogWrite(2,brightness);
 13c:	69 81       	ldd	r22, Y+1	; 0x01
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 40 00 	call	0x80	; 0x80 <analogWrite>
			analogWrite(4,brightness);
 144:	69 81       	ldd	r22, Y+1	; 0x01
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	0e 94 40 00 	call	0x80	; 0x80 <analogWrite>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	a0 e2       	ldi	r26, 0x20	; 32
 152:	b1 e4       	ldi	r27, 0x41	; 65
 154:	8e 83       	std	Y+6, r24	; 0x06
 156:	9f 83       	std	Y+7, r25	; 0x07
 158:	a8 87       	std	Y+8, r26	; 0x08
 15a:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	4a e7       	ldi	r20, 0x7A	; 122
 162:	55 e4       	ldi	r21, 0x45	; 69
 164:	6e 81       	ldd	r22, Y+6	; 0x06
 166:	7f 81       	ldd	r23, Y+7	; 0x07
 168:	88 85       	ldd	r24, Y+8	; 0x08
 16a:	99 85       	ldd	r25, Y+9	; 0x09
 16c:	0e 94 2a 02 	call	0x454	; 0x454 <__mulsf3>
 170:	dc 01       	movw	r26, r24
 172:	cb 01       	movw	r24, r22
 174:	8a 87       	std	Y+10, r24	; 0x0a
 176:	9b 87       	std	Y+11, r25	; 0x0b
 178:	ac 87       	std	Y+12, r26	; 0x0c
 17a:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	40 e8       	ldi	r20, 0x80	; 128
 182:	5f e3       	ldi	r21, 0x3F	; 63
 184:	6a 85       	ldd	r22, Y+10	; 0x0a
 186:	7b 85       	ldd	r23, Y+11	; 0x0b
 188:	8c 85       	ldd	r24, Y+12	; 0x0c
 18a:	9d 85       	ldd	r25, Y+13	; 0x0d
 18c:	0e 94 a4 01 	call	0x348	; 0x348 <__cmpsf2>
 190:	88 23       	and	r24, r24
 192:	2c f4       	brge	.+10     	; 0x19e <main+0x80>
		__ticks = 1;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	9f 87       	std	Y+15, r25	; 0x0f
 19a:	8e 87       	std	Y+14, r24	; 0x0e
 19c:	3f c0       	rjmp	.+126    	; 0x21c <main+0xfe>
	else if (__tmp > 65535)
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	3f ef       	ldi	r19, 0xFF	; 255
 1a2:	4f e7       	ldi	r20, 0x7F	; 127
 1a4:	57 e4       	ldi	r21, 0x47	; 71
 1a6:	6a 85       	ldd	r22, Y+10	; 0x0a
 1a8:	7b 85       	ldd	r23, Y+11	; 0x0b
 1aa:	8c 85       	ldd	r24, Y+12	; 0x0c
 1ac:	9d 85       	ldd	r25, Y+13	; 0x0d
 1ae:	0e 94 25 02 	call	0x44a	; 0x44a <__gesf2>
 1b2:	18 16       	cp	r1, r24
 1b4:	4c f5       	brge	.+82     	; 0x208 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 e2       	ldi	r20, 0x20	; 32
 1bc:	51 e4       	ldi	r21, 0x41	; 65
 1be:	6e 81       	ldd	r22, Y+6	; 0x06
 1c0:	7f 81       	ldd	r23, Y+7	; 0x07
 1c2:	88 85       	ldd	r24, Y+8	; 0x08
 1c4:	99 85       	ldd	r25, Y+9	; 0x09
 1c6:	0e 94 2a 02 	call	0x454	; 0x454 <__mulsf3>
 1ca:	dc 01       	movw	r26, r24
 1cc:	cb 01       	movw	r24, r22
 1ce:	bc 01       	movw	r22, r24
 1d0:	cd 01       	movw	r24, r26
 1d2:	0e 94 a9 01 	call	0x352	; 0x352 <__fixunssfsi>
 1d6:	dc 01       	movw	r26, r24
 1d8:	cb 01       	movw	r24, r22
 1da:	9f 87       	std	Y+15, r25	; 0x0f
 1dc:	8e 87       	std	Y+14, r24	; 0x0e
 1de:	0f c0       	rjmp	.+30     	; 0x1fe <main+0xe0>
 1e0:	80 e9       	ldi	r24, 0x90	; 144
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	99 8b       	std	Y+17, r25	; 0x11
 1e6:	88 8b       	std	Y+16, r24	; 0x10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e8:	88 89       	ldd	r24, Y+16	; 0x10
 1ea:	99 89       	ldd	r25, Y+17	; 0x11
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0xce>
 1f0:	99 8b       	std	Y+17, r25	; 0x11
 1f2:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f4:	8e 85       	ldd	r24, Y+14	; 0x0e
 1f6:	9f 85       	ldd	r25, Y+15	; 0x0f
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	9f 87       	std	Y+15, r25	; 0x0f
 1fc:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fe:	8e 85       	ldd	r24, Y+14	; 0x0e
 200:	9f 85       	ldd	r25, Y+15	; 0x0f
 202:	89 2b       	or	r24, r25
 204:	69 f7       	brne	.-38     	; 0x1e0 <main+0xc2>
 206:	14 c0       	rjmp	.+40     	; 0x230 <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 208:	6a 85       	ldd	r22, Y+10	; 0x0a
 20a:	7b 85       	ldd	r23, Y+11	; 0x0b
 20c:	8c 85       	ldd	r24, Y+12	; 0x0c
 20e:	9d 85       	ldd	r25, Y+13	; 0x0d
 210:	0e 94 a9 01 	call	0x352	; 0x352 <__fixunssfsi>
 214:	dc 01       	movw	r26, r24
 216:	cb 01       	movw	r24, r22
 218:	9f 87       	std	Y+15, r25	; 0x0f
 21a:	8e 87       	std	Y+14, r24	; 0x0e
 21c:	8e 85       	ldd	r24, Y+14	; 0x0e
 21e:	9f 85       	ldd	r25, Y+15	; 0x0f
 220:	9b 8b       	std	Y+19, r25	; 0x13
 222:	8a 8b       	std	Y+18, r24	; 0x12
 224:	8a 89       	ldd	r24, Y+18	; 0x12
 226:	9b 89       	ldd	r25, Y+19	; 0x13
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x10a>
 22c:	9b 8b       	std	Y+19, r25	; 0x13
 22e:	8a 8b       	std	Y+18, r24	; 0x12

	while(1){
		/*
		 * Perulangan kode
		 */
		for(brightness = 0x00; brightness < 0xff; ++brightness){
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	89 83       	std	Y+1, r24	; 0x01
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	8f 3f       	cpi	r24, 0xFF	; 255
 23a:	09 f0       	breq	.+2      	; 0x23e <main+0x120>
 23c:	7f cf       	rjmp	.-258    	; 0x13c <main+0x1e>
			analogWrite(2,brightness);
			analogWrite(4,brightness);
			_delay_ms(10);
		}

		for(brightness = 0xff ; brightness > 0x00; --brightness){
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	7d c0       	rjmp	.+250    	; 0x33e <main+0x220>
			analogWrite(2,brightness);
 244:	69 81       	ldd	r22, Y+1	; 0x01
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	0e 94 40 00 	call	0x80	; 0x80 <analogWrite>
			analogWrite(4,brightness);
 24c:	69 81       	ldd	r22, Y+1	; 0x01
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	0e 94 40 00 	call	0x80	; 0x80 <analogWrite>
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	a0 e2       	ldi	r26, 0x20	; 32
 25a:	b1 e4       	ldi	r27, 0x41	; 65
 25c:	8a 83       	std	Y+2, r24	; 0x02
 25e:	9b 83       	std	Y+3, r25	; 0x03
 260:	ac 83       	std	Y+4, r26	; 0x04
 262:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	4a e7       	ldi	r20, 0x7A	; 122
 26a:	55 e4       	ldi	r21, 0x45	; 69
 26c:	6a 81       	ldd	r22, Y+2	; 0x02
 26e:	7b 81       	ldd	r23, Y+3	; 0x03
 270:	8c 81       	ldd	r24, Y+4	; 0x04
 272:	9d 81       	ldd	r25, Y+5	; 0x05
 274:	0e 94 2a 02 	call	0x454	; 0x454 <__mulsf3>
 278:	dc 01       	movw	r26, r24
 27a:	cb 01       	movw	r24, r22
 27c:	8c 8b       	std	Y+20, r24	; 0x14
 27e:	9d 8b       	std	Y+21, r25	; 0x15
 280:	ae 8b       	std	Y+22, r26	; 0x16
 282:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	40 e8       	ldi	r20, 0x80	; 128
 28a:	5f e3       	ldi	r21, 0x3F	; 63
 28c:	6c 89       	ldd	r22, Y+20	; 0x14
 28e:	7d 89       	ldd	r23, Y+21	; 0x15
 290:	8e 89       	ldd	r24, Y+22	; 0x16
 292:	9f 89       	ldd	r25, Y+23	; 0x17
 294:	0e 94 a4 01 	call	0x348	; 0x348 <__cmpsf2>
 298:	88 23       	and	r24, r24
 29a:	2c f4       	brge	.+10     	; 0x2a6 <main+0x188>
		__ticks = 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	99 8f       	std	Y+25, r25	; 0x19
 2a2:	88 8f       	std	Y+24, r24	; 0x18
 2a4:	3f c0       	rjmp	.+126    	; 0x324 <main+0x206>
	else if (__tmp > 65535)
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	3f ef       	ldi	r19, 0xFF	; 255
 2aa:	4f e7       	ldi	r20, 0x7F	; 127
 2ac:	57 e4       	ldi	r21, 0x47	; 71
 2ae:	6c 89       	ldd	r22, Y+20	; 0x14
 2b0:	7d 89       	ldd	r23, Y+21	; 0x15
 2b2:	8e 89       	ldd	r24, Y+22	; 0x16
 2b4:	9f 89       	ldd	r25, Y+23	; 0x17
 2b6:	0e 94 25 02 	call	0x44a	; 0x44a <__gesf2>
 2ba:	18 16       	cp	r1, r24
 2bc:	4c f5       	brge	.+82     	; 0x310 <main+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	40 e2       	ldi	r20, 0x20	; 32
 2c4:	51 e4       	ldi	r21, 0x41	; 65
 2c6:	6a 81       	ldd	r22, Y+2	; 0x02
 2c8:	7b 81       	ldd	r23, Y+3	; 0x03
 2ca:	8c 81       	ldd	r24, Y+4	; 0x04
 2cc:	9d 81       	ldd	r25, Y+5	; 0x05
 2ce:	0e 94 2a 02 	call	0x454	; 0x454 <__mulsf3>
 2d2:	dc 01       	movw	r26, r24
 2d4:	cb 01       	movw	r24, r22
 2d6:	bc 01       	movw	r22, r24
 2d8:	cd 01       	movw	r24, r26
 2da:	0e 94 a9 01 	call	0x352	; 0x352 <__fixunssfsi>
 2de:	dc 01       	movw	r26, r24
 2e0:	cb 01       	movw	r24, r22
 2e2:	99 8f       	std	Y+25, r25	; 0x19
 2e4:	88 8f       	std	Y+24, r24	; 0x18
 2e6:	0f c0       	rjmp	.+30     	; 0x306 <main+0x1e8>
 2e8:	80 e9       	ldi	r24, 0x90	; 144
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	9b 8f       	std	Y+27, r25	; 0x1b
 2ee:	8a 8f       	std	Y+26, r24	; 0x1a
 2f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
 2f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <main+0x1d6>
 2f8:	9b 8f       	std	Y+27, r25	; 0x1b
 2fa:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2fc:	88 8d       	ldd	r24, Y+24	; 0x18
 2fe:	99 8d       	ldd	r25, Y+25	; 0x19
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	99 8f       	std	Y+25, r25	; 0x19
 304:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 306:	88 8d       	ldd	r24, Y+24	; 0x18
 308:	99 8d       	ldd	r25, Y+25	; 0x19
 30a:	89 2b       	or	r24, r25
 30c:	69 f7       	brne	.-38     	; 0x2e8 <main+0x1ca>
 30e:	14 c0       	rjmp	.+40     	; 0x338 <main+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 310:	6c 89       	ldd	r22, Y+20	; 0x14
 312:	7d 89       	ldd	r23, Y+21	; 0x15
 314:	8e 89       	ldd	r24, Y+22	; 0x16
 316:	9f 89       	ldd	r25, Y+23	; 0x17
 318:	0e 94 a9 01 	call	0x352	; 0x352 <__fixunssfsi>
 31c:	dc 01       	movw	r26, r24
 31e:	cb 01       	movw	r24, r22
 320:	99 8f       	std	Y+25, r25	; 0x19
 322:	88 8f       	std	Y+24, r24	; 0x18
 324:	88 8d       	ldd	r24, Y+24	; 0x18
 326:	99 8d       	ldd	r25, Y+25	; 0x19
 328:	9d 8f       	std	Y+29, r25	; 0x1d
 32a:	8c 8f       	std	Y+28, r24	; 0x1c
 32c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 32e:	9d 8d       	ldd	r25, Y+29	; 0x1d
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0x212>
 334:	9d 8f       	std	Y+29, r25	; 0x1d
 336:	8c 8f       	std	Y+28, r24	; 0x1c
			analogWrite(2,brightness);
			analogWrite(4,brightness);
			_delay_ms(10);
		}

		for(brightness = 0xff ; brightness > 0x00; --brightness){
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	81 50       	subi	r24, 0x01	; 1
 33c:	89 83       	std	Y+1, r24	; 0x01
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	88 23       	and	r24, r24
 342:	09 f0       	breq	.+2      	; 0x346 <main+0x228>
 344:	7f cf       	rjmp	.-258    	; 0x244 <main+0x126>
			analogWrite(2,brightness);
			analogWrite(4,brightness);
			_delay_ms(10);
		}
	}
 346:	f8 ce       	rjmp	.-528    	; 0x138 <main+0x1a>

00000348 <__cmpsf2>:
 348:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__fp_cmp>
 34c:	08 f4       	brcc	.+2      	; 0x350 <__cmpsf2+0x8>
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	08 95       	ret

00000352 <__fixunssfsi>:
 352:	0e 94 04 02 	call	0x408	; 0x408 <__fp_splitA>
 356:	88 f0       	brcs	.+34     	; 0x37a <__fixunssfsi+0x28>
 358:	9f 57       	subi	r25, 0x7F	; 127
 35a:	98 f0       	brcs	.+38     	; 0x382 <__fixunssfsi+0x30>
 35c:	b9 2f       	mov	r27, r25
 35e:	99 27       	eor	r25, r25
 360:	b7 51       	subi	r27, 0x17	; 23
 362:	b0 f0       	brcs	.+44     	; 0x390 <__fixunssfsi+0x3e>
 364:	e1 f0       	breq	.+56     	; 0x39e <__fixunssfsi+0x4c>
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	88 1f       	adc	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	1a f0       	brmi	.+6      	; 0x376 <__fixunssfsi+0x24>
 370:	ba 95       	dec	r27
 372:	c9 f7       	brne	.-14     	; 0x366 <__fixunssfsi+0x14>
 374:	14 c0       	rjmp	.+40     	; 0x39e <__fixunssfsi+0x4c>
 376:	b1 30       	cpi	r27, 0x01	; 1
 378:	91 f0       	breq	.+36     	; 0x39e <__fixunssfsi+0x4c>
 37a:	0e 94 1e 02 	call	0x43c	; 0x43c <__fp_zero>
 37e:	b1 e0       	ldi	r27, 0x01	; 1
 380:	08 95       	ret
 382:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_zero>
 386:	67 2f       	mov	r22, r23
 388:	78 2f       	mov	r23, r24
 38a:	88 27       	eor	r24, r24
 38c:	b8 5f       	subi	r27, 0xF8	; 248
 38e:	39 f0       	breq	.+14     	; 0x39e <__fixunssfsi+0x4c>
 390:	b9 3f       	cpi	r27, 0xF9	; 249
 392:	cc f3       	brlt	.-14     	; 0x386 <__fixunssfsi+0x34>
 394:	86 95       	lsr	r24
 396:	77 95       	ror	r23
 398:	67 95       	ror	r22
 39a:	b3 95       	inc	r27
 39c:	d9 f7       	brne	.-10     	; 0x394 <__fixunssfsi+0x42>
 39e:	3e f4       	brtc	.+14     	; 0x3ae <__fixunssfsi+0x5c>
 3a0:	90 95       	com	r25
 3a2:	80 95       	com	r24
 3a4:	70 95       	com	r23
 3a6:	61 95       	neg	r22
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255
 3aa:	8f 4f       	sbci	r24, 0xFF	; 255
 3ac:	9f 4f       	sbci	r25, 0xFF	; 255
 3ae:	08 95       	ret

000003b0 <__fp_cmp>:
 3b0:	99 0f       	add	r25, r25
 3b2:	00 08       	sbc	r0, r0
 3b4:	55 0f       	add	r21, r21
 3b6:	aa 0b       	sbc	r26, r26
 3b8:	e0 e8       	ldi	r30, 0x80	; 128
 3ba:	fe ef       	ldi	r31, 0xFE	; 254
 3bc:	16 16       	cp	r1, r22
 3be:	17 06       	cpc	r1, r23
 3c0:	e8 07       	cpc	r30, r24
 3c2:	f9 07       	cpc	r31, r25
 3c4:	c0 f0       	brcs	.+48     	; 0x3f6 <__fp_cmp+0x46>
 3c6:	12 16       	cp	r1, r18
 3c8:	13 06       	cpc	r1, r19
 3ca:	e4 07       	cpc	r30, r20
 3cc:	f5 07       	cpc	r31, r21
 3ce:	98 f0       	brcs	.+38     	; 0x3f6 <__fp_cmp+0x46>
 3d0:	62 1b       	sub	r22, r18
 3d2:	73 0b       	sbc	r23, r19
 3d4:	84 0b       	sbc	r24, r20
 3d6:	95 0b       	sbc	r25, r21
 3d8:	39 f4       	brne	.+14     	; 0x3e8 <__fp_cmp+0x38>
 3da:	0a 26       	eor	r0, r26
 3dc:	61 f0       	breq	.+24     	; 0x3f6 <__fp_cmp+0x46>
 3de:	23 2b       	or	r18, r19
 3e0:	24 2b       	or	r18, r20
 3e2:	25 2b       	or	r18, r21
 3e4:	21 f4       	brne	.+8      	; 0x3ee <__fp_cmp+0x3e>
 3e6:	08 95       	ret
 3e8:	0a 26       	eor	r0, r26
 3ea:	09 f4       	brne	.+2      	; 0x3ee <__fp_cmp+0x3e>
 3ec:	a1 40       	sbci	r26, 0x01	; 1
 3ee:	a6 95       	lsr	r26
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	81 1d       	adc	r24, r1
 3f4:	81 1d       	adc	r24, r1
 3f6:	08 95       	ret

000003f8 <__fp_split3>:
 3f8:	57 fd       	sbrc	r21, 7
 3fa:	90 58       	subi	r25, 0x80	; 128
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	59 f0       	breq	.+22     	; 0x418 <__fp_splitA+0x10>
 402:	5f 3f       	cpi	r21, 0xFF	; 255
 404:	71 f0       	breq	.+28     	; 0x422 <__fp_splitA+0x1a>
 406:	47 95       	ror	r20

00000408 <__fp_splitA>:
 408:	88 0f       	add	r24, r24
 40a:	97 fb       	bst	r25, 7
 40c:	99 1f       	adc	r25, r25
 40e:	61 f0       	breq	.+24     	; 0x428 <__fp_splitA+0x20>
 410:	9f 3f       	cpi	r25, 0xFF	; 255
 412:	79 f0       	breq	.+30     	; 0x432 <__fp_splitA+0x2a>
 414:	87 95       	ror	r24
 416:	08 95       	ret
 418:	12 16       	cp	r1, r18
 41a:	13 06       	cpc	r1, r19
 41c:	14 06       	cpc	r1, r20
 41e:	55 1f       	adc	r21, r21
 420:	f2 cf       	rjmp	.-28     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 422:	46 95       	lsr	r20
 424:	f1 df       	rcall	.-30     	; 0x408 <__fp_splitA>
 426:	08 c0       	rjmp	.+16     	; 0x438 <__fp_splitA+0x30>
 428:	16 16       	cp	r1, r22
 42a:	17 06       	cpc	r1, r23
 42c:	18 06       	cpc	r1, r24
 42e:	99 1f       	adc	r25, r25
 430:	f1 cf       	rjmp	.-30     	; 0x414 <__fp_splitA+0xc>
 432:	86 95       	lsr	r24
 434:	71 05       	cpc	r23, r1
 436:	61 05       	cpc	r22, r1
 438:	08 94       	sec
 43a:	08 95       	ret

0000043c <__fp_zero>:
 43c:	e8 94       	clt

0000043e <__fp_szero>:
 43e:	bb 27       	eor	r27, r27
 440:	66 27       	eor	r22, r22
 442:	77 27       	eor	r23, r23
 444:	cb 01       	movw	r24, r22
 446:	97 f9       	bld	r25, 7
 448:	08 95       	ret

0000044a <__gesf2>:
 44a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__fp_cmp>
 44e:	08 f4       	brcc	.+2      	; 0x452 <__gesf2+0x8>
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	08 95       	ret

00000454 <__mulsf3>:
 454:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3x>
 458:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__fp_round>
 45c:	0e 94 a0 02 	call	0x540	; 0x540 <__fp_pscA>
 460:	38 f0       	brcs	.+14     	; 0x470 <__mulsf3+0x1c>
 462:	0e 94 a7 02 	call	0x54e	; 0x54e <__fp_pscB>
 466:	20 f0       	brcs	.+8      	; 0x470 <__mulsf3+0x1c>
 468:	95 23       	and	r25, r21
 46a:	11 f0       	breq	.+4      	; 0x470 <__mulsf3+0x1c>
 46c:	0c 94 97 02 	jmp	0x52e	; 0x52e <__fp_inf>
 470:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_nan>
 474:	11 24       	eor	r1, r1
 476:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__fp_szero>

0000047a <__mulsf3x>:
 47a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__fp_split3>
 47e:	70 f3       	brcs	.-36     	; 0x45c <__mulsf3+0x8>

00000480 <__mulsf3_pse>:
 480:	95 9f       	mul	r25, r21
 482:	c1 f3       	breq	.-16     	; 0x474 <__mulsf3+0x20>
 484:	95 0f       	add	r25, r21
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	55 1f       	adc	r21, r21
 48a:	62 9f       	mul	r22, r18
 48c:	f0 01       	movw	r30, r0
 48e:	72 9f       	mul	r23, r18
 490:	bb 27       	eor	r27, r27
 492:	f0 0d       	add	r31, r0
 494:	b1 1d       	adc	r27, r1
 496:	63 9f       	mul	r22, r19
 498:	aa 27       	eor	r26, r26
 49a:	f0 0d       	add	r31, r0
 49c:	b1 1d       	adc	r27, r1
 49e:	aa 1f       	adc	r26, r26
 4a0:	64 9f       	mul	r22, r20
 4a2:	66 27       	eor	r22, r22
 4a4:	b0 0d       	add	r27, r0
 4a6:	a1 1d       	adc	r26, r1
 4a8:	66 1f       	adc	r22, r22
 4aa:	82 9f       	mul	r24, r18
 4ac:	22 27       	eor	r18, r18
 4ae:	b0 0d       	add	r27, r0
 4b0:	a1 1d       	adc	r26, r1
 4b2:	62 1f       	adc	r22, r18
 4b4:	73 9f       	mul	r23, r19
 4b6:	b0 0d       	add	r27, r0
 4b8:	a1 1d       	adc	r26, r1
 4ba:	62 1f       	adc	r22, r18
 4bc:	83 9f       	mul	r24, r19
 4be:	a0 0d       	add	r26, r0
 4c0:	61 1d       	adc	r22, r1
 4c2:	22 1f       	adc	r18, r18
 4c4:	74 9f       	mul	r23, r20
 4c6:	33 27       	eor	r19, r19
 4c8:	a0 0d       	add	r26, r0
 4ca:	61 1d       	adc	r22, r1
 4cc:	23 1f       	adc	r18, r19
 4ce:	84 9f       	mul	r24, r20
 4d0:	60 0d       	add	r22, r0
 4d2:	21 1d       	adc	r18, r1
 4d4:	82 2f       	mov	r24, r18
 4d6:	76 2f       	mov	r23, r22
 4d8:	6a 2f       	mov	r22, r26
 4da:	11 24       	eor	r1, r1
 4dc:	9f 57       	subi	r25, 0x7F	; 127
 4de:	50 40       	sbci	r21, 0x00	; 0
 4e0:	9a f0       	brmi	.+38     	; 0x508 <__mulsf3_pse+0x88>
 4e2:	f1 f0       	breq	.+60     	; 0x520 <__mulsf3_pse+0xa0>
 4e4:	88 23       	and	r24, r24
 4e6:	4a f0       	brmi	.+18     	; 0x4fa <__mulsf3_pse+0x7a>
 4e8:	ee 0f       	add	r30, r30
 4ea:	ff 1f       	adc	r31, r31
 4ec:	bb 1f       	adc	r27, r27
 4ee:	66 1f       	adc	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	88 1f       	adc	r24, r24
 4f4:	91 50       	subi	r25, 0x01	; 1
 4f6:	50 40       	sbci	r21, 0x00	; 0
 4f8:	a9 f7       	brne	.-22     	; 0x4e4 <__mulsf3_pse+0x64>
 4fa:	9e 3f       	cpi	r25, 0xFE	; 254
 4fc:	51 05       	cpc	r21, r1
 4fe:	80 f0       	brcs	.+32     	; 0x520 <__mulsf3_pse+0xa0>
 500:	0c 94 97 02 	jmp	0x52e	; 0x52e <__fp_inf>
 504:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__fp_szero>
 508:	5f 3f       	cpi	r21, 0xFF	; 255
 50a:	e4 f3       	brlt	.-8      	; 0x504 <__mulsf3_pse+0x84>
 50c:	98 3e       	cpi	r25, 0xE8	; 232
 50e:	d4 f3       	brlt	.-12     	; 0x504 <__mulsf3_pse+0x84>
 510:	86 95       	lsr	r24
 512:	77 95       	ror	r23
 514:	67 95       	ror	r22
 516:	b7 95       	ror	r27
 518:	f7 95       	ror	r31
 51a:	e7 95       	ror	r30
 51c:	9f 5f       	subi	r25, 0xFF	; 255
 51e:	c1 f7       	brne	.-16     	; 0x510 <__mulsf3_pse+0x90>
 520:	fe 2b       	or	r31, r30
 522:	88 0f       	add	r24, r24
 524:	91 1d       	adc	r25, r1
 526:	96 95       	lsr	r25
 528:	87 95       	ror	r24
 52a:	97 f9       	bld	r25, 7
 52c:	08 95       	ret

0000052e <__fp_inf>:
 52e:	97 f9       	bld	r25, 7
 530:	9f 67       	ori	r25, 0x7F	; 127
 532:	80 e8       	ldi	r24, 0x80	; 128
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	08 95       	ret

0000053a <__fp_nan>:
 53a:	9f ef       	ldi	r25, 0xFF	; 255
 53c:	80 ec       	ldi	r24, 0xC0	; 192
 53e:	08 95       	ret

00000540 <__fp_pscA>:
 540:	00 24       	eor	r0, r0
 542:	0a 94       	dec	r0
 544:	16 16       	cp	r1, r22
 546:	17 06       	cpc	r1, r23
 548:	18 06       	cpc	r1, r24
 54a:	09 06       	cpc	r0, r25
 54c:	08 95       	ret

0000054e <__fp_pscB>:
 54e:	00 24       	eor	r0, r0
 550:	0a 94       	dec	r0
 552:	12 16       	cp	r1, r18
 554:	13 06       	cpc	r1, r19
 556:	14 06       	cpc	r1, r20
 558:	05 06       	cpc	r0, r21
 55a:	08 95       	ret

0000055c <__fp_round>:
 55c:	09 2e       	mov	r0, r25
 55e:	03 94       	inc	r0
 560:	00 0c       	add	r0, r0
 562:	11 f4       	brne	.+4      	; 0x568 <__fp_round+0xc>
 564:	88 23       	and	r24, r24
 566:	52 f0       	brmi	.+20     	; 0x57c <__fp_round+0x20>
 568:	bb 0f       	add	r27, r27
 56a:	40 f4       	brcc	.+16     	; 0x57c <__fp_round+0x20>
 56c:	bf 2b       	or	r27, r31
 56e:	11 f4       	brne	.+4      	; 0x574 <__fp_round+0x18>
 570:	60 ff       	sbrs	r22, 0
 572:	04 c0       	rjmp	.+8      	; 0x57c <__fp_round+0x20>
 574:	6f 5f       	subi	r22, 0xFF	; 255
 576:	7f 4f       	sbci	r23, 0xFF	; 255
 578:	8f 4f       	sbci	r24, 0xFF	; 255
 57a:	9f 4f       	sbci	r25, 0xFF	; 255
 57c:	08 95       	ret

0000057e <_exit>:
 57e:	f8 94       	cli

00000580 <__stop_program>:
 580:	ff cf       	rjmp	.-2      	; 0x580 <__stop_program>
