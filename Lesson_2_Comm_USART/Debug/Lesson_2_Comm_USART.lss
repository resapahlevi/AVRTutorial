
Lesson_2_Comm_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000648  000006bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000648  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000d44  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d52  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000215e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002170  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000bbc  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1a  00000000  00000000  00002d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00003886  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e4       	ldi	r30, 0x48	; 72
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
 112:	0c 94 22 03 	jmp	0x644	; 0x644 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <main>:
#include <avr/io.h>
#include "USART.h"

int main(void){
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	1f 92       	push	r1
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
	char receiveString;

	DDRB |= _BV(DDB5);
 124:	84 e2       	ldi	r24, 0x24	; 36
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	24 e2       	ldi	r18, 0x24	; 36
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	20 62       	ori	r18, 0x20	; 32
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
	initUSART();
 136:	0e 94 bc 00 	call	0x178	; 0x178 <initUSART>
	printString("Hello World");
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	92 e0       	ldi	r25, 0x02	; 2
 13e:	0e 94 0b 01 	call	0x216	; 0x216 <printString>

	while(1){
		receiveString = receiveByte();
 142:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <receiveByte>
 146:	89 83       	std	Y+1, r24	; 0x01
		transmitByte(receiveString);
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
		PORTB |= _BV(receiveString);
 14e:	85 e2       	ldi	r24, 0x25	; 37
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	25 e2       	ldi	r18, 0x25	; 37
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	62 2f       	mov	r22, r18
 15c:	29 81       	ldd	r18, Y+1	; 0x01
 15e:	42 2f       	mov	r20, r18
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <main+0x52>
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	4a 95       	dec	r20
 16e:	e2 f7       	brpl	.-8      	; 0x168 <main+0x4e>
 170:	26 2b       	or	r18, r22
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
	}
 176:	e5 cf       	rjmp	.-54     	; 0x142 <main+0x28>

00000178 <initUSART>:

#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 180:	85 ec       	ldi	r24, 0xC5	; 197
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	10 82       	st	Z, r1
  UBRR0L = UBRRL_VALUE;
 188:	84 ec       	ldi	r24, 0xC4	; 196
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	27 e6       	ldi	r18, 0x67	; 103
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 192:	80 ec       	ldi	r24, 0xC0	; 192
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	20 ec       	ldi	r18, 0xC0	; 192
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	20 81       	ld	r18, Z
 19e:	2d 7f       	andi	r18, 0xFD	; 253
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 1a4:	81 ec       	ldi	r24, 0xC1	; 193
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	28 e1       	ldi	r18, 0x18	; 24
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 1ae:	82 ec       	ldi	r24, 0xC2	; 194
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	26 e0       	ldi	r18, 0x06	; 6
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
}
 1b8:	00 00       	nop
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <transmitByte>:


void transmitByte(uint8_t data) {
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	1f 92       	push	r1
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	89 83       	std	Y+1, r24	; 0x01
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 1cc:	80 ec       	ldi	r24, 0xC0	; 192
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	88 2f       	mov	r24, r24
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	80 72       	andi	r24, 0x20	; 32
 1da:	99 27       	eor	r25, r25
 1dc:	89 2b       	or	r24, r25
 1de:	b1 f3       	breq	.-20     	; 0x1cc <transmitByte+0xc>
  UDR0 = data;                                            /* send data */
 1e0:	86 ec       	ldi	r24, 0xC6	; 198
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	29 81       	ldd	r18, Y+1	; 0x01
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
}
 1ea:	00 00       	nop
 1ec:	0f 90       	pop	r0
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <receiveByte>:

uint8_t receiveByte(void) {
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 1fc:	80 ec       	ldi	r24, 0xC0	; 192
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	d4 f7       	brge	.-12     	; 0x1fc <receiveByte+0x8>
  return UDR0;                                /* return register value */
 208:	86 ec       	ldi	r24, 0xC6	; 198
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	fc 01       	movw	r30, r24
 20e:	80 81       	ld	r24, Z
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	00 d0       	rcall	.+0      	; 0x21c <printString+0x6>
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	9b 83       	std	Y+3, r25	; 0x03
 222:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t i = 0;
 224:	19 82       	std	Y+1, r1	; 0x01
  while (myString[i]) {
 226:	0e c0       	rjmp	.+28     	; 0x244 <printString+0x2e>
    transmitByte(myString[i]);
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	2a 81       	ldd	r18, Y+2	; 0x02
 230:	3b 81       	ldd	r19, Y+3	; 0x03
 232:	82 0f       	add	r24, r18
 234:	93 1f       	adc	r25, r19
 236:	fc 01       	movw	r30, r24
 238:	80 81       	ld	r24, Z
 23a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
    i++;
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	89 83       	std	Y+1, r24	; 0x01

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	88 2f       	mov	r24, r24
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2a 81       	ldd	r18, Y+2	; 0x02
 24c:	3b 81       	ldd	r19, Y+3	; 0x03
 24e:	82 0f       	add	r24, r18
 250:	93 1f       	adc	r25, r19
 252:	fc 01       	movw	r30, r24
 254:	80 81       	ld	r24, Z
 256:	88 23       	and	r24, r24
 258:	39 f7       	brne	.-50     	; 0x228 <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 25a:	00 00       	nop
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <readString>:

void readString(char myString[], uint8_t maxLength) {
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	00 d0       	rcall	.+0      	; 0x26e <readString+0x6>
 26e:	1f 92       	push	r1
 270:	1f 92       	push	r1
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	9c 83       	std	Y+4, r25	; 0x04
 278:	8b 83       	std	Y+3, r24	; 0x03
 27a:	6d 83       	std	Y+5, r22	; 0x05
  char response;
  uint8_t i;
  i = 0;
 27c:	19 82       	std	Y+1, r1	; 0x01
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 27e:	16 c0       	rjmp	.+44     	; 0x2ac <readString+0x44>
    response = receiveByte();
 280:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <receiveByte>
 284:	8a 83       	std	Y+2, r24	; 0x02
    transmitByte(response);                                    /* echo */
 286:	8a 81       	ldd	r24, Y+2	; 0x02
 288:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
    if (response == '\r') {                     /* enter marks the end */
 28c:	8a 81       	ldd	r24, Y+2	; 0x02
 28e:	8d 30       	cpi	r24, 0x0D	; 13
 290:	c1 f0       	breq	.+48     	; 0x2c2 <readString+0x5a>
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	88 2f       	mov	r24, r24
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	2b 81       	ldd	r18, Y+3	; 0x03
 29a:	3c 81       	ldd	r19, Y+4	; 0x04
 29c:	82 0f       	add	r24, r18
 29e:	93 1f       	adc	r25, r19
 2a0:	2a 81       	ldd	r18, Y+2	; 0x02
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 83       	st	Z, r18
      i++;
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	89 83       	std	Y+1, r24	; 0x01

void readString(char myString[], uint8_t maxLength) {
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	28 2f       	mov	r18, r24
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	8d 81       	ldd	r24, Y+5	; 0x05
 2b4:	88 2f       	mov	r24, r24
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	28 17       	cp	r18, r24
 2bc:	39 07       	cpc	r19, r25
 2be:	04 f3       	brlt	.-64     	; 0x280 <readString+0x18>
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <readString+0x5c>
    response = receiveByte();
    transmitByte(response);                                    /* echo */
    if (response == '\r') {                     /* enter marks the end */
      break;
 2c2:	00 00       	nop
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	88 2f       	mov	r24, r24
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	2b 81       	ldd	r18, Y+3	; 0x03
 2cc:	3c 81       	ldd	r19, Y+4	; 0x04
 2ce:	82 0f       	add	r24, r18
 2d0:	93 1f       	adc	r25, r19
 2d2:	fc 01       	movw	r30, r24
 2d4:	10 82       	st	Z, r1
}
 2d6:	00 00       	nop
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <printByte>:

void printByte(uint8_t byte) {
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	1f 92       	push	r1
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	89 83       	std	Y+1, r24	; 0x01
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 2f4:	99 81       	ldd	r25, Y+1	; 0x01
 2f6:	89 e2       	ldi	r24, 0x29	; 41
 2f8:	98 9f       	mul	r25, r24
 2fa:	81 2d       	mov	r24, r1
 2fc:	11 24       	eor	r1, r1
 2fe:	82 95       	swap	r24
 300:	8f 70       	andi	r24, 0x0F	; 15
 302:	80 5d       	subi	r24, 0xD0	; 208
 304:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 308:	99 81       	ldd	r25, Y+1	; 0x01
 30a:	8d ec       	ldi	r24, 0xCD	; 205
 30c:	98 9f       	mul	r25, r24
 30e:	81 2d       	mov	r24, r1
 310:	11 24       	eor	r1, r1
 312:	98 2f       	mov	r25, r24
 314:	96 95       	lsr	r25
 316:	96 95       	lsr	r25
 318:	96 95       	lsr	r25
 31a:	8d ec       	ldi	r24, 0xCD	; 205
 31c:	98 9f       	mul	r25, r24
 31e:	81 2d       	mov	r24, r1
 320:	11 24       	eor	r1, r1
 322:	86 95       	lsr	r24
 324:	86 95       	lsr	r24
 326:	86 95       	lsr	r24
 328:	88 0f       	add	r24, r24
 32a:	28 2f       	mov	r18, r24
 32c:	22 0f       	add	r18, r18
 32e:	22 0f       	add	r18, r18
 330:	82 0f       	add	r24, r18
 332:	29 2f       	mov	r18, r25
 334:	28 1b       	sub	r18, r24
 336:	82 2f       	mov	r24, r18
 338:	80 5d       	subi	r24, 0xD0	; 208
 33a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 33e:	99 81       	ldd	r25, Y+1	; 0x01
 340:	8d ec       	ldi	r24, 0xCD	; 205
 342:	98 9f       	mul	r25, r24
 344:	81 2d       	mov	r24, r1
 346:	11 24       	eor	r1, r1
 348:	86 95       	lsr	r24
 34a:	86 95       	lsr	r24
 34c:	86 95       	lsr	r24
 34e:	88 0f       	add	r24, r24
 350:	28 2f       	mov	r18, r24
 352:	22 0f       	add	r18, r18
 354:	22 0f       	add	r18, r18
 356:	82 0f       	add	r24, r18
 358:	29 2f       	mov	r18, r25
 35a:	28 1b       	sub	r18, r24
 35c:	82 2f       	mov	r24, r18
 35e:	80 5d       	subi	r24, 0xD0	; 208
 360:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
}
 364:	00 00       	nop
 366:	0f 90       	pop	r0
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <printWord>:

void printWord(uint16_t word) {
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	1f 92       	push	r1
 374:	1f 92       	push	r1
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	9a 83       	std	Y+2, r25	; 0x02
 37c:	89 83       	std	Y+1, r24	; 0x01
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	9a 81       	ldd	r25, Y+2	; 0x02
 382:	92 95       	swap	r25
 384:	82 95       	swap	r24
 386:	8f 70       	andi	r24, 0x0F	; 15
 388:	89 27       	eor	r24, r25
 38a:	9f 70       	andi	r25, 0x0F	; 15
 38c:	89 27       	eor	r24, r25
 38e:	9c 01       	movw	r18, r24
 390:	a7 e4       	ldi	r26, 0x47	; 71
 392:	b3 e0       	ldi	r27, 0x03	; 3
 394:	0e 94 13 03 	call	0x626	; 0x626 <__umulhisi3>
 398:	96 95       	lsr	r25
 39a:	87 95       	ror	r24
 39c:	96 95       	lsr	r25
 39e:	87 95       	ror	r24
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	80 5d       	subi	r24, 0xD0	; 208
 3a6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	9a 81       	ldd	r25, Y+2	; 0x02
 3ae:	96 95       	lsr	r25
 3b0:	87 95       	ror	r24
 3b2:	96 95       	lsr	r25
 3b4:	87 95       	ror	r24
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	9c 01       	movw	r18, r24
 3bc:	a5 ec       	ldi	r26, 0xC5	; 197
 3be:	b0 e2       	ldi	r27, 0x20	; 32
 3c0:	0e 94 13 03 	call	0x626	; 0x626 <__umulhisi3>
 3c4:	ac 01       	movw	r20, r24
 3c6:	52 95       	swap	r21
 3c8:	42 95       	swap	r20
 3ca:	4f 70       	andi	r20, 0x0F	; 15
 3cc:	45 27       	eor	r20, r21
 3ce:	5f 70       	andi	r21, 0x0F	; 15
 3d0:	45 27       	eor	r20, r21
 3d2:	9a 01       	movw	r18, r20
 3d4:	ad ec       	ldi	r26, 0xCD	; 205
 3d6:	bc ec       	ldi	r27, 0xCC	; 204
 3d8:	0e 94 13 03 	call	0x626	; 0x626 <__umulhisi3>
 3dc:	96 95       	lsr	r25
 3de:	87 95       	ror	r24
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	96 95       	lsr	r25
 3e6:	87 95       	ror	r24
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	9c 01       	movw	r18, r24
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	22 0f       	add	r18, r18
 3f4:	33 1f       	adc	r19, r19
 3f6:	82 0f       	add	r24, r18
 3f8:	93 1f       	adc	r25, r19
 3fa:	9a 01       	movw	r18, r20
 3fc:	28 1b       	sub	r18, r24
 3fe:	39 0b       	sbc	r19, r25
 400:	c9 01       	movw	r24, r18
 402:	80 5d       	subi	r24, 0xD0	; 208
 404:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	9a 81       	ldd	r25, Y+2	; 0x02
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	96 95       	lsr	r25
 412:	87 95       	ror	r24
 414:	9c 01       	movw	r18, r24
 416:	ab e7       	ldi	r26, 0x7B	; 123
 418:	b4 e1       	ldi	r27, 0x14	; 20
 41a:	0e 94 13 03 	call	0x626	; 0x626 <__umulhisi3>
 41e:	ac 01       	movw	r20, r24
 420:	56 95       	lsr	r21
 422:	47 95       	ror	r20
 424:	9a 01       	movw	r18, r20
 426:	ad ec       	ldi	r26, 0xCD	; 205
 428:	bc ec       	ldi	r27, 0xCC	; 204
 42a:	0e 94 13 03 	call	0x626	; 0x626 <__umulhisi3>
 42e:	96 95       	lsr	r25
 430:	87 95       	ror	r24
 432:	96 95       	lsr	r25
 434:	87 95       	ror	r24
 436:	96 95       	lsr	r25
 438:	87 95       	ror	r24
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	9c 01       	movw	r18, r24
 440:	22 0f       	add	r18, r18
 442:	33 1f       	adc	r19, r19
 444:	22 0f       	add	r18, r18
 446:	33 1f       	adc	r19, r19
 448:	82 0f       	add	r24, r18
 44a:	93 1f       	adc	r25, r19
 44c:	9a 01       	movw	r18, r20
 44e:	28 1b       	sub	r18, r24
 450:	39 0b       	sbc	r19, r25
 452:	c9 01       	movw	r24, r18
 454:	80 5d       	subi	r24, 0xD0	; 208
 456:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	9a 81       	ldd	r25, Y+2	; 0x02
 45e:	9c 01       	movw	r18, r24
 460:	ad ec       	ldi	r26, 0xCD	; 205
 462:	bc ec       	ldi	r27, 0xCC	; 204
 464:	0e 94 13 03 	call	0x626	; 0x626 <__umulhisi3>
 468:	ac 01       	movw	r20, r24
 46a:	56 95       	lsr	r21
 46c:	47 95       	ror	r20
 46e:	56 95       	lsr	r21
 470:	47 95       	ror	r20
 472:	56 95       	lsr	r21
 474:	47 95       	ror	r20
 476:	9a 01       	movw	r18, r20
 478:	ad ec       	ldi	r26, 0xCD	; 205
 47a:	bc ec       	ldi	r27, 0xCC	; 204
 47c:	0e 94 13 03 	call	0x626	; 0x626 <__umulhisi3>
 480:	96 95       	lsr	r25
 482:	87 95       	ror	r24
 484:	96 95       	lsr	r25
 486:	87 95       	ror	r24
 488:	96 95       	lsr	r25
 48a:	87 95       	ror	r24
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	9c 01       	movw	r18, r24
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	22 0f       	add	r18, r18
 498:	33 1f       	adc	r19, r19
 49a:	82 0f       	add	r24, r18
 49c:	93 1f       	adc	r25, r19
 49e:	9a 01       	movw	r18, r20
 4a0:	28 1b       	sub	r18, r24
 4a2:	39 0b       	sbc	r19, r25
 4a4:	c9 01       	movw	r24, r18
 4a6:	80 5d       	subi	r24, 0xD0	; 208
 4a8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 4ac:	49 81       	ldd	r20, Y+1	; 0x01
 4ae:	5a 81       	ldd	r21, Y+2	; 0x02
 4b0:	9a 01       	movw	r18, r20
 4b2:	ad ec       	ldi	r26, 0xCD	; 205
 4b4:	bc ec       	ldi	r27, 0xCC	; 204
 4b6:	0e 94 13 03 	call	0x626	; 0x626 <__umulhisi3>
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	96 95       	lsr	r25
 4c0:	87 95       	ror	r24
 4c2:	96 95       	lsr	r25
 4c4:	87 95       	ror	r24
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	9c 01       	movw	r18, r24
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	22 0f       	add	r18, r18
 4d2:	33 1f       	adc	r19, r19
 4d4:	82 0f       	add	r24, r18
 4d6:	93 1f       	adc	r25, r19
 4d8:	9a 01       	movw	r18, r20
 4da:	28 1b       	sub	r18, r24
 4dc:	39 0b       	sbc	r19, r25
 4de:	c9 01       	movw	r24, r18
 4e0:	80 5d       	subi	r24, 0xD0	; 208
 4e2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
}
 4e6:	00 00       	nop
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <printBinaryByte>:

void printBinaryByte(uint8_t byte) {
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	1f 92       	push	r1
 4f8:	1f 92       	push	r1
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	8a 83       	std	Y+2, r24	; 0x02
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 500:	87 e0       	ldi	r24, 0x07	; 7
 502:	89 83       	std	Y+1, r24	; 0x01
 504:	1c c0       	rjmp	.+56     	; 0x53e <printBinaryByte+0x4c>
    if (bit_is_set(byte, bit))
 506:	ce 01       	movw	r24, r28
 508:	02 96       	adiw	r24, 0x02	; 2
 50a:	fc 01       	movw	r30, r24
 50c:	80 81       	ld	r24, Z
 50e:	88 2f       	mov	r24, r24
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	29 81       	ldd	r18, Y+1	; 0x01
 514:	22 2f       	mov	r18, r18
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <printBinaryByte+0x2c>
 51a:	95 95       	asr	r25
 51c:	87 95       	ror	r24
 51e:	2a 95       	dec	r18
 520:	e2 f7       	brpl	.-8      	; 0x51a <printBinaryByte+0x28>
 522:	81 70       	andi	r24, 0x01	; 1
 524:	99 27       	eor	r25, r25
 526:	89 2b       	or	r24, r25
 528:	21 f0       	breq	.+8      	; 0x532 <printBinaryByte+0x40>
      transmitByte('1');
 52a:	81 e3       	ldi	r24, 0x31	; 49
 52c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
 530:	03 c0       	rjmp	.+6      	; 0x538 <printBinaryByte+0x46>
    else
      transmitByte('0');
 532:	80 e3       	ldi	r24, 0x30	; 48
 534:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 538:	89 81       	ldd	r24, Y+1	; 0x01
 53a:	81 50       	subi	r24, 0x01	; 1
 53c:	89 83       	std	Y+1, r24	; 0x01
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	8f 3f       	cpi	r24, 0xFF	; 255
 542:	09 f7       	brne	.-62     	; 0x506 <printBinaryByte+0x14>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 544:	00 00       	nop
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	1f 92       	push	r1
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	89 83       	std	Y+1, r24	; 0x01
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	8a 30       	cpi	r24, 0x0A	; 10
 560:	18 f4       	brcc	.+6      	; 0x568 <nibbleToHexCharacter+0x18>
    return ('0' + nibble);
 562:	89 81       	ldd	r24, Y+1	; 0x01
 564:	80 5d       	subi	r24, 0xD0	; 208
 566:	02 c0       	rjmp	.+4      	; 0x56c <nibbleToHexCharacter+0x1c>
  }
  else {
    return ('A' + nibble - 10);
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 56c:	0f 90       	pop	r0
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <printHexByte>:

void printHexByte(uint8_t byte) {
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	1f 92       	push	r1
 57a:	1f 92       	push	r1
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	8a 83       	std	Y+2, r24	; 0x02
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	82 95       	swap	r24
 586:	8f 70       	andi	r24, 0x0F	; 15
 588:	89 83       	std	Y+1, r24	; 0x01
  transmitByte(nibbleToHexCharacter(nibble));
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	0e 94 a8 02 	call	0x550	; 0x550 <nibbleToHexCharacter>
 590:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
  nibble = byte & 0b00001111;
 594:	8a 81       	ldd	r24, Y+2	; 0x02
 596:	8f 70       	andi	r24, 0x0F	; 15
 598:	89 83       	std	Y+1, r24	; 0x01
  transmitByte(nibbleToHexCharacter(nibble));
 59a:	89 81       	ldd	r24, Y+1	; 0x01
 59c:	0e 94 a8 02 	call	0x550	; 0x550 <nibbleToHexCharacter>
 5a0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
}
 5a4:	00 00       	nop
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <getNumber>:

uint8_t getNumber(void) {
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <getNumber+0x6>
 5b6:	1f 92       	push	r1
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
  // Gets a numerical 0-255 from the serial port.
  // Converts from string to number.
  char hundreds = '0';
 5bc:	80 e3       	ldi	r24, 0x30	; 48
 5be:	8c 83       	std	Y+4, r24	; 0x04
  char tens = '0';
 5c0:	80 e3       	ldi	r24, 0x30	; 48
 5c2:	89 83       	std	Y+1, r24	; 0x01
  char ones = '0';
 5c4:	80 e3       	ldi	r24, 0x30	; 48
 5c6:	8a 83       	std	Y+2, r24	; 0x02
  char thisChar = '0';
 5c8:	80 e3       	ldi	r24, 0x30	; 48
 5ca:	8b 83       	std	Y+3, r24	; 0x03
  do {                                                   /* shift over */
    hundreds = tens;
 5cc:	89 81       	ldd	r24, Y+1	; 0x01
 5ce:	8c 83       	std	Y+4, r24	; 0x04
    tens = ones;
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	89 83       	std	Y+1, r24	; 0x01
    ones = thisChar;
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	8a 83       	std	Y+2, r24	; 0x02
    thisChar = receiveByte();                   /* get a new character */
 5d8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <receiveByte>
 5dc:	8b 83       	std	Y+3, r24	; 0x03
    transmitByte(thisChar);                                    /* echo */
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <transmitByte>
  } while (thisChar != '\r');                     /* until type return */
 5e4:	8b 81       	ldd	r24, Y+3	; 0x03
 5e6:	8d 30       	cpi	r24, 0x0D	; 13
 5e8:	89 f7       	brne	.-30     	; 0x5cc <getNumber+0x1c>
  return (100 * (hundreds - '0') + 10 * (tens - '0') + ones - '0');
 5ea:	8c 81       	ldd	r24, Y+4	; 0x04
 5ec:	88 2f       	mov	r24, r24
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	c0 97       	sbiw	r24, 0x30	; 48
 5f2:	98 2f       	mov	r25, r24
 5f4:	84 e6       	ldi	r24, 0x64	; 100
 5f6:	98 9f       	mul	r25, r24
 5f8:	20 2d       	mov	r18, r0
 5fa:	11 24       	eor	r1, r1
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	88 2f       	mov	r24, r24
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	c0 97       	sbiw	r24, 0x30	; 48
 604:	88 0f       	add	r24, r24
 606:	98 2f       	mov	r25, r24
 608:	99 0f       	add	r25, r25
 60a:	99 0f       	add	r25, r25
 60c:	89 0f       	add	r24, r25
 60e:	92 2f       	mov	r25, r18
 610:	98 0f       	add	r25, r24
 612:	8a 81       	ldd	r24, Y+2	; 0x02
 614:	89 0f       	add	r24, r25
 616:	80 53       	subi	r24, 0x30	; 48
}
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <__umulhisi3>:
 626:	a2 9f       	mul	r26, r18
 628:	b0 01       	movw	r22, r0
 62a:	b3 9f       	mul	r27, r19
 62c:	c0 01       	movw	r24, r0
 62e:	a3 9f       	mul	r26, r19
 630:	70 0d       	add	r23, r0
 632:	81 1d       	adc	r24, r1
 634:	11 24       	eor	r1, r1
 636:	91 1d       	adc	r25, r1
 638:	b2 9f       	mul	r27, r18
 63a:	70 0d       	add	r23, r0
 63c:	81 1d       	adc	r24, r1
 63e:	11 24       	eor	r1, r1
 640:	91 1d       	adc	r25, r1
 642:	08 95       	ret

00000644 <_exit>:
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
