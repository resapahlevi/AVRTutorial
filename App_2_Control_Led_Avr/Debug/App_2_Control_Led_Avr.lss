
App_2_Control_Led_Avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0000026c  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000066c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c0a  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000bbc  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1a  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  bc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  cc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  dc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  e0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  f8:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <analogRead>:
 *      Author: squanixmachine
 */

#include <avr/io.h>

uint16_t analogRead(uint8_t port){
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	1f 92       	push	r1
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0xF0) | (port & 0x0F);
 10c:	8c e7       	ldi	r24, 0x7C	; 124
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	2c e7       	ldi	r18, 0x7C	; 124
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	20 81       	ld	r18, Z
 118:	32 2f       	mov	r19, r18
 11a:	30 7f       	andi	r19, 0xF0	; 240
 11c:	29 81       	ldd	r18, Y+1	; 0x01
 11e:	2f 70       	andi	r18, 0x0F	; 15
 120:	23 2b       	or	r18, r19
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18

	ADCSRA |= (1 << ADSC);
 126:	8a e7       	ldi	r24, 0x7A	; 122
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	2a e7       	ldi	r18, 0x7A	; 122
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	20 81       	ld	r18, Z
 132:	20 64       	ori	r18, 0x40	; 64
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18

	while(ADCSRA & (1<<ADSC));
 138:	00 00       	nop
 13a:	8a e7       	ldi	r24, 0x7A	; 122
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	88 2f       	mov	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	80 74       	andi	r24, 0x40	; 64
 148:	99 27       	eor	r25, r25
 14a:	89 2b       	or	r24, r25
 14c:	b1 f7       	brne	.-20     	; 0x13a <analogRead+0x3a>

	return ADC;
 14e:	88 e7       	ldi	r24, 0x78	; 120
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	80 81       	ld	r24, Z
 156:	91 81       	ldd	r25, Z+1	; 0x01
}
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <analogWrite>:

void analogWrite(uint8_t pin, uint8_t val){
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	1f 92       	push	r1
 166:	1f 92       	push	r1
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	6a 83       	std	Y+2, r22	; 0x02

	DDRH |= (DDRH & 0x00) | (pin & 0xFF);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	48 2f       	mov	r20, r24
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	31 e0       	ldi	r19, 0x01	; 1
 186:	f9 01       	movw	r30, r18
 188:	20 81       	ld	r18, Z
 18a:	32 2f       	mov	r19, r18
 18c:	24 2f       	mov	r18, r20
 18e:	23 2b       	or	r18, r19
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18

	  if(pin == 8) OCR4A = val;
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	88 30       	cpi	r24, 0x08	; 8
 198:	41 f4       	brne	.+16     	; 0x1aa <analogWrite+0x4a>
 19a:	88 ea       	ldi	r24, 0xA8	; 168
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	2a 81       	ldd	r18, Y+2	; 0x02
 1a0:	22 2f       	mov	r18, r18
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	31 83       	std	Z+1, r19	; 0x01
 1a8:	20 83       	st	Z, r18
	  if(pin == 16) OCR4B = val;
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	80 31       	cpi	r24, 0x10	; 16
 1ae:	41 f4       	brne	.+16     	; 0x1c0 <analogWrite+0x60>
 1b0:	8a ea       	ldi	r24, 0xAA	; 170
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	2a 81       	ldd	r18, Y+2	; 0x02
 1b6:	22 2f       	mov	r18, r18
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	31 83       	std	Z+1, r19	; 0x01
 1be:	20 83       	st	Z, r18
}
 1c0:	00 00       	nop
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <pwm_init>:

void pwm_init(){
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
	 TCCR4A |= _BV(COM4A1) | _BV(COM4B1) | _BV(WGM41) | _BV(WGM40);
 1d4:	80 ea       	ldi	r24, 0xA0	; 160
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	20 ea       	ldi	r18, 0xA0	; 160
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	f9 01       	movw	r30, r18
 1de:	20 81       	ld	r18, Z
 1e0:	23 6a       	ori	r18, 0xA3	; 163
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
	 TCCR4B |= _BV(WGM42) | _BV(CS40);
 1e6:	81 ea       	ldi	r24, 0xA1	; 161
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	21 ea       	ldi	r18, 0xA1	; 161
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	f9 01       	movw	r30, r18
 1f0:	20 81       	ld	r18, Z
 1f2:	29 60       	ori	r18, 0x09	; 9
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
}
 1f8:	00 00       	nop
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <adc_init>:

void adc_init(){
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
	ADMUX |= _BV(REFS0);
 208:	8c e7       	ldi	r24, 0x7C	; 124
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	2c e7       	ldi	r18, 0x7C	; 124
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	f9 01       	movw	r30, r18
 212:	20 81       	ld	r18, Z
 214:	20 64       	ori	r18, 0x40	; 64
 216:	fc 01       	movw	r30, r24
 218:	20 83       	st	Z, r18
	ADCSRA |= _BV(ADPS2) | _BV(ADEN);
 21a:	8a e7       	ldi	r24, 0x7A	; 122
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	2a e7       	ldi	r18, 0x7A	; 122
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	f9 01       	movw	r30, r18
 224:	20 81       	ld	r18, Z
 226:	24 68       	ori	r18, 0x84	; 132
 228:	fc 01       	movw	r30, r24
 22a:	20 83       	st	Z, r18
}
 22c:	00 00       	nop
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <main>:

int main(){
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	00 d0       	rcall	.+0      	; 0x23a <main+0x6>
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
	adc_init();
 23e:	0e 94 00 01 	call	0x200	; 0x200 <adc_init>
	pwm_init();
 242:	0e 94 e6 00 	call	0x1cc	; 0x1cc <pwm_init>

	uint16_t potval;
	uint8_t bringhtness;

	while(1){
		potval = analogRead(PK0);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 80 00 	call	0x100	; 0x100 <analogRead>
 24c:	9a 83       	std	Y+2, r25	; 0x02
 24e:	89 83       	std	Y+1, r24	; 0x01

		bringhtness = potval / (1023 / 255);
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	9a 81       	ldd	r25, Y+2	; 0x02
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	8b 83       	std	Y+3, r24	; 0x03

		analogWrite(8,bringhtness);
 25e:	6b 81       	ldd	r22, Y+3	; 0x03
 260:	88 e0       	ldi	r24, 0x08	; 8
 262:	0e 94 b0 00 	call	0x160	; 0x160 <analogWrite>
	}
 266:	ef cf       	rjmp	.-34     	; 0x246 <main+0x12>

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
