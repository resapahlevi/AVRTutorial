
Practice_1_Analog_Sensor_Avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000130  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000564  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bac  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012c8  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00001e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <analogRead>:
 *      Author: squanixmachine
 */

#include <avr/io.h>

uint16_t analogRead(uint8_t port){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	1f 92       	push	r1
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	89 83       	std	Y+1, r24	; 0x01
	// Cara paling aman untuk memilih port ADC
	ADMUX = (ADMUX & 0xF0) | (port & 0x0F);
  8c:	8c e7       	ldi	r24, 0x7C	; 124
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	2c e7       	ldi	r18, 0x7C	; 124
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	20 81       	ld	r18, Z
  98:	32 2f       	mov	r19, r18
  9a:	30 7f       	andi	r19, 0xF0	; 240
  9c:	29 81       	ldd	r18, Y+1	; 0x01
  9e:	2f 70       	andi	r18, 0x0F	; 15
  a0:	23 2b       	or	r18, r19
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
	// Mengaktifkan counter ADC
	ADCSRA |= (1 << ADSC);
  a6:	8a e7       	ldi	r24, 0x7A	; 122
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	2a e7       	ldi	r18, 0x7A	; 122
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	f9 01       	movw	r30, r18
  b0:	20 81       	ld	r18, Z
  b2:	20 64       	ori	r18, 0x40	; 64
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18

	while(ADCSRA & (1 << ADSC));
  b8:	00 00       	nop
  ba:	8a e7       	ldi	r24, 0x7A	; 122
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	88 2f       	mov	r24, r24
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	80 74       	andi	r24, 0x40	; 64
  c8:	99 27       	eor	r25, r25
  ca:	89 2b       	or	r24, r25
  cc:	b1 f7       	brne	.-20     	; 0xba <analogRead+0x3a>

	return ADC;
  ce:	88 e7       	ldi	r24, 0x78	; 120
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	80 81       	ld	r24, Z
  d6:	91 81       	ldd	r25, Z+1	; 0x01
}
  d8:	0f 90       	pop	r0
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <main>:

int main(){
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	00 d0       	rcall	.+0      	; 0xe6 <main+0x6>
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Konfigurasi pin, protokol, variabel
	 */
	ADMUX |= (1 << REFS0);	// Analog Reference
  ea:	8c e7       	ldi	r24, 0x7C	; 124
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2c e7       	ldi	r18, 0x7C	; 124
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	20 64       	ori	r18, 0x40	; 64
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADPS2);	// Perscalar ADC 16bit
  fc:	8a e7       	ldi	r24, 0x7A	; 122
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	2a e7       	ldi	r18, 0x7A	; 122
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	20 81       	ld	r18, Z
 108:	24 60       	ori	r18, 0x04	; 4
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN);	// Mengaktifkan ADC
 10e:	8a e7       	ldi	r24, 0x7A	; 122
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	2a e7       	ldi	r18, 0x7A	; 122
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	f9 01       	movw	r30, r18
 118:	20 81       	ld	r18, Z
 11a:	20 68       	ori	r18, 0x80	; 128
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18

	while(1){
		/*
		 * Perulangan kode
		 */
		potval = analogRead(2);
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	0e 94 40 00 	call	0x80	; 0x80 <analogRead>
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01
	}
 12a:	fa cf       	rjmp	.-12     	; 0x120 <main+0x40>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
